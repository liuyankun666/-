#include<iostream>
using namespace std;
const int Maxint = 100;
const int M = 50;           //定义村庄个数的最大值
void Floyd(int dist[][M], int m)//Floyd算法将每一对顶点的路径编程最短路径
{
	int i, j;
	for (int k = 0; k<m; k++)
		for (i = 0; i<m; i++)
			for (j = 0; j<m; j++)
				if (dist[i][k] + dist[k][j]<dist[i][j])
					dist[i][j] = dist[i][k] + dist[k][j];
	cout << endl << "每对顶点路径最短的邻接矩阵为：" << endl << endl;
	cout << "=====================" << endl;
	for (i = 0; i<m; i++)
	{
		for (j = 0; j<m; j++)
		{
			if (dist[i][j] != 100)
				cout << "  ";
			cout << dist[i][j] << "  ";
		}
		cout << endl;
	}
	cout << "=====================" << endl;
}


void minp(int c[][M], int m)      //该函数用于找出最小偏心度的村庄
{
	int inmax[M];
	int i, j;
	for (i = 0; i<m; i++)
		inmax[i] = 0;
	for (j = 0; j<m; j++)               //inmax数组用来保存最短路径,即邻接矩阵每一列的最大值，也就是每个村庄的偏心度
	{
		int t = 0;
		for (i = 0; i<m; i++)
		{
			if (t<c[i][j])
				t = c[i][j];
		}
		inmax[j] = t;
	}
	cout << endl << "村庄的偏心度依次为：";
	for (i = 0; i<m; i++)
		cout << inmax[i] << " ";
	cout << endl;
	int max = inmax[0];
	int l;
	for (i = 0; i<m; i++)                  //比较inmax数组中元素的大小，并输出最小元素下标+1,即为建医院的地点
		if (inmax[i]<max)
		{
			max = inmax[i];
			l = i;
		}

	cout << "所以医院应该建在村庄" << l + 1 << "中" << endl;
}



void create(int n, int l, int c[][M])
{
	cout << endl << "   ============================================================" << endl;
	int i, j, weight;
	for (i = 0; i<n; i++)
	{
		for (j = 0; j<n; j++)
			c[i][j] = Maxint;
		c[i][i] = 0;
	}
	for (int k = 0; k<l; k++)
	{
		cout << "请输入第" << k + 1 << "条道路的起点、终点和它的长度(中间用空格隔开):";
	C:		cin >> i >> j >> weight;
		if (i>n || i<0 || j>n || j<0 || weight>Maxint || weight<0)
		{
			cout << "输入非法，请重输该边的所有值" << endl;
			goto C;
		}
		c[i - 1][j - 1] = weight;
	}
	cout << "    ================================================================" << endl << endl;
	cout << "整理得到原始邻接矩阵为：" << endl;
	cout << "=============================" << endl;
	for (i = 0; i<n; i++)
	{
		for (j = 0; j<n; j++)
		{
			if (c[i][j] != 100)
				cout << "  ";
			cout << c[i][j] << "  ";
		}
		cout << endl;
	}
	cout << "==============================" << endl << endl;
}





void main()
{
	cout << endl;
	cout << "    医院选址问题，请按以下步骤操作" << endl;
	cout << "    ================================" << endl << endl;
	cout << "将所有村庄和道路分别从编号（即1、2、3、···）" << endl;
	int arc[M][M];   //用于存储图的邻接矩阵
	int m;
A:  cout << "1.请输入村庄个数：";
	cin >> m;
	if (m>M || m<0)
	{
		cout << "对不起，输入的数值不合法，请重新输入！" << endl << endl;
		goto A;
	}
	int e;
B:  cout << "2.请输入图中有几条道路：";
	cin >> e;
	if (e>(m*(m - 1)) || e<0)
	{
		cout << "对不起，输入的数值不合法！" << endl << endl;
		goto B;
	}
	create(m, e, arc);
	Floyd(arc, m);
	minp(arc, m);

	cout << "============================运行结束========================" << endl;
	system("pause");
}
